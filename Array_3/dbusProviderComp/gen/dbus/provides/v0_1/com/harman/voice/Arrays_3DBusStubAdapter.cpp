/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.2.qualifier.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: Beta_R1_v0.1.0
* generated on: Thu Sep 10 18:55:35 IST 2015
*/
#include <v0_1/com/harman/voice/Arrays_3.hpp>
#include <v0_1/com/harman/voice/Arrays_3DBusStubAdapter.hpp>

namespace v0_1 {
namespace com {
namespace harman {
namespace voice {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createArrays_3DBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<Arrays_3DBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerArrays_3DBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	Arrays_3::getInterface(), &createArrays_3DBusStubAdapter);
}

Arrays_3DBusStubAdapterInternal::~Arrays_3DBusStubAdapterInternal() {
    deactivateManagedInstances();
    Arrays_3DBusStubAdapterHelper::deinit();
}

void Arrays_3DBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* Arrays_3DBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"route\">\n"
            "<arg name=\"_latLong\" type=\"a(dd)\" direction=\"in\" />\n"
            "<arg name=\"_path\" type=\"a(dd)\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getShortestRoute\">\n"
            "<arg name=\"_latLongStructure\" type=\"(dd)\" direction=\"in\" />\n"
            "<arg name=\"_path\" type=\"a(dd)\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getPOI\">\n"
            "<arg name=\"_latLongStruct\" type=\"(dd)\" direction=\"in\" />\n"
            "<arg name=\"_poisName\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        Arrays_3Stub,
        CommonAPI::Version
        > Arrays_3DBusStubAdapterInternal::getArrays_3InterfaceVersionStubDispatcher(&Arrays_3Stub::getInterfaceVersion, "uu");



CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    Arrays_3Stub,
    std::tuple<std::vector<Arrays_3::latlong>>,
    std::tuple<std::vector<Arrays_3::latlong>>
    > Arrays_3DBusStubAdapterInternal::routeStubDispatcher(&Arrays_3Stub::route, "a(dd)", std::tuple<std::vector<Arrays_3::latlong>, std::vector<Arrays_3::latlong>>());
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    Arrays_3Stub,
    std::tuple<Arrays_3::latlong>,
    std::tuple<std::vector<Arrays_3::latlong>>
    > Arrays_3DBusStubAdapterInternal::getShortestRouteStubDispatcher(&Arrays_3Stub::getShortestRoute, "a(dd)", std::tuple<Arrays_3::latlong, std::vector<Arrays_3::latlong>>());
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    Arrays_3Stub,
    std::tuple<Arrays_3::latlong>,
    std::tuple<Arrays_3::POIS_NAME>
    > Arrays_3DBusStubAdapterInternal::getPOIStubDispatcher(&Arrays_3Stub::getPOI, "i", std::tuple<Arrays_3::latlong, Arrays_3::POIS_NAME>());





const Arrays_3DBusStubAdapterHelper::StubDispatcherTable& Arrays_3DBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& Arrays_3DBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

Arrays_3DBusStubAdapterInternal::Arrays_3DBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      Arrays_3DBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<Arrays_3Stub>(_stub), false),
      stubDispatcherTable_({
            { { "route", "a(dd)" }, &com::harman::voice::Arrays_3DBusStubAdapterInternal::routeStubDispatcher },
            { { "getShortestRoute", "(dd)" }, &com::harman::voice::Arrays_3DBusStubAdapterInternal::getShortestRouteStubDispatcher },
            { { "getPOI", "(dd)" }, &com::harman::voice::Arrays_3DBusStubAdapterInternal::getPOIStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::voice::Arrays_3DBusStubAdapterInternal::getArrays_3InterfaceVersionStubDispatcher });
}

const bool Arrays_3DBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace voice
} // namespace harman
} // namespace com
} // namespace v0_1
