/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.2.qualifier.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: Beta_R1_v0.1.0
* generated on: Thu Sep 10 18:55:35 IST 2015
*/
#ifndef COM_HARMAN_VOICE_Arrays_3_DBUS_STUB_ADAPTER_HPP_
#define COM_HARMAN_VOICE_Arrays_3_DBUS_STUB_ADAPTER_HPP_

#include <v0_1/com/harman/voice/Arrays_3Stub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0_1 {
namespace com {
namespace harman {
namespace voice {

typedef CommonAPI::DBus::DBusStubAdapterHelper<Arrays_3Stub> Arrays_3DBusStubAdapterHelper;

class Arrays_3DBusStubAdapterInternal
    : public virtual Arrays_3StubAdapter,
      public Arrays_3DBusStubAdapterHelper
{
public:
    Arrays_3DBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~Arrays_3DBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();




    const Arrays_3DBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        Arrays_3Stub,
        CommonAPI::Version
        > getArrays_3InterfaceVersionStubDispatcher;



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    Arrays_3Stub,
    std::tuple<std::vector<Arrays_3::latlong>>,
    std::tuple<std::vector<Arrays_3::latlong>>
    > routeStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    Arrays_3Stub,
    std::tuple<Arrays_3::latlong>,
    std::tuple<std::vector<Arrays_3::latlong>>
    > getShortestRouteStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    Arrays_3Stub,
    std::tuple<Arrays_3::latlong>,
    std::tuple<Arrays_3::POIS_NAME>
    > getPOIStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    Arrays_3DBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class Arrays_3DBusStubAdapter
    : public Arrays_3DBusStubAdapterInternal,
      public std::enable_shared_from_this<Arrays_3DBusStubAdapter> {
public:
    Arrays_3DBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          Arrays_3DBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace voice
} // namespace harman
} // namespace com
} // namespace v0_1

#endif // COM_HARMAN_VOICE_Arrays_3_DBUS_STUB_ADAPTER_HPP_
