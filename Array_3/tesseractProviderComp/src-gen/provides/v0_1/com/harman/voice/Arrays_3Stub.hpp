/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.2.qualifier.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: Beta_R1_v0.1.0
* generated on: Thu Sep 10 18:55:35 IST 2015
*/
#ifndef COM_HARMAN_VOICE_Arrays_3_STUB_HPP_
#define COM_HARMAN_VOICE_Arrays_3_STUB_HPP_

#include <functional>




#include <v0_1/com/harman/voice/Arrays_3.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0_1 {
namespace com {
namespace harman {
namespace voice {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Arrays_3. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class Arrays_3StubAdapter
    : virtual public CommonAPI::StubAdapter, 
      public Arrays_3 {
 public:



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Arrays_3.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class Arrays_3StubRemoteEvent
{
public:
    virtual ~Arrays_3StubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Arrays_3 to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class Arrays_3Stub
    : public virtual CommonAPI::Stub<Arrays_3StubAdapter, Arrays_3StubRemoteEvent>
{
public:
    typedef std::function<void (std::vector<Arrays_3::latlong> _path)>routeReply_t;
    typedef std::function<void (std::vector<Arrays_3::latlong> _path)>getShortestRouteReply_t;
    typedef std::function<void (Arrays_3::POIS_NAME _poisName)>getPOIReply_t;

    virtual ~Arrays_3Stub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /// This is the method that will be called on remote calls on the method route.
    virtual void route(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<Arrays_3::latlong> _latLong, routeReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getShortestRoute.
    virtual void getShortestRoute(const std::shared_ptr<CommonAPI::ClientId> _client, Arrays_3::latlong _latLongStructure, getShortestRouteReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getPOI.
    virtual void getPOI(const std::shared_ptr<CommonAPI::ClientId> _client, Arrays_3::latlong _latLongStruct, getPOIReply_t _reply) = 0;

    using CommonAPI::Stub<Arrays_3StubAdapter, Arrays_3StubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<Arrays_3StubAdapter, Arrays_3StubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<Arrays_3StubAdapter, Arrays_3StubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef Arrays_3StubRemoteEvent RemoteEventType;
    typedef Arrays_3 StubInterface;
};

} // namespace voice
} // namespace harman
} // namespace com
} // namespace v0_1

#endif // COM_HARMAN_VOICE_Arrays_3_STUB_HPP_
