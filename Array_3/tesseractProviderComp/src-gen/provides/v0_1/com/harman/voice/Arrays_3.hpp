/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.2.qualifier.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: Beta_R1_v0.1.0
* generated on: Thu Sep 10 18:55:35 IST 2015
*/
#ifndef COM_HARMAN_VOICE_ARRAYS_3_HPP_
#define COM_HARMAN_VOICE_ARRAYS_3_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0_1 {
namespace com {
namespace harman {
namespace voice {

class Arrays_3 {
public:
    virtual ~Arrays_3() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct POIS_NAME : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            HOSPITAIL = 0,
            INSTITUATUIONS = 1,
            TEMPLES = 2
        };
        
        POIS_NAME() = default;
        POIS_NAME(const Literal &_value) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_value)) {}
    
        inline bool operator==(const POIS_NAME &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const POIS_NAME &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const POIS_NAME &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const POIS_NAME &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const POIS_NAME &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const POIS_NAME &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct latlong : CommonAPI::Struct<double, double> {
    	
    	latlong() {
    	}
    	latlong(const double &_lat, const double &_longitude)
    	{
    		std::get<0>(values_) = _lat;
    		std::get<1>(values_) = _longitude;
    	}
    	inline const double &getLat() const { return std::get<0>(values_); }
    	inline void setLat(const double &_value) { std::get<0>(values_) = _value; }
    	inline const double &getLongitude() const { return std::get<1>(values_); }
    	inline void setLongitude(const double &_value) { std::get<1>(values_) = _value; }
    	bool operator==(const latlong &_other) const;
    	inline bool operator!=(const latlong &_other) const {
    		return !((*this) == _other);
    	}
    
    };
};

const char* Arrays_3::getInterface() {
    return ("com.harman.voice.Arrays_3");
}

CommonAPI::Version Arrays_3::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace voice
} // namespace harman
} // namespace com
} // namespace v0_1

namespace CommonAPI {
}

#endif // COM_HARMAN_VOICE_ARRAYS_3_HPP_
