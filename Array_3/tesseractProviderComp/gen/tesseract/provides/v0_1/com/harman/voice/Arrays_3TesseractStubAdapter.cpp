/**
 * generated by Voice CodeGen Version: Beta_R1_v0.1.0
 * generated on: Thu Sep 10 18:55:36 IST 2015
 */

#include "v0_1/com/harman/voice/Arrays_3_tesseract_serializers.hpp"
#include "v0_1/com/harman/voice/Arrays_3.hpp"
#include "Arrays_3TesseractStubAdapter.hpp"

namespace v0_1 {
namespace com {
namespace harman {
namespace voice {

std::shared_ptr<CommonAPI::Tesseract::CTesseractStubAdapter> createArrays_3TesseractStubAdapter(
	const CommonAPI::Address &_address,
	const std::shared_ptr<CommonAPI::StubBase> &_stub)
{
    return std::make_shared<Arrays_3TesseractStubAdapter>(_address, _stub);
}

INITIALIZER(Arrays_3TesseractStubAdapter) {
    CommonAPI::Tesseract::CTesseractFactory::get()->registerStubAdapterCreateMethod(
    	Arrays_3::getInterface(), &createArrays_3TesseractStubAdapter);
}

Arrays_3TesseractStubAdapterInternal::Arrays_3TesseractStubAdapterInternal(
	const CommonAPI::Address &_address,
	const std::shared_ptr<CommonAPI::StubBase> &_stub)
: Arrays_3TesseractStubAdapterHelper(std::dynamic_pointer_cast<Arrays_3Stub>(_stub))
{
	Arrays_3TesseractStubAdapterInternal::routeStubDispatcher.setStubDelegate(std::dynamic_pointer_cast<Arrays_3Stub>(_stub));
	Arrays_3TesseractStubAdapterInternal::getShortestRouteStubDispatcher.setStubDelegate(std::dynamic_pointer_cast<Arrays_3Stub>(_stub));
	Arrays_3TesseractStubAdapterInternal::getPOIStubDispatcher.setStubDelegate(std::dynamic_pointer_cast<Arrays_3Stub>(_stub));
}

void Arrays_3TesseractStubAdapterInternal::deactivateManagedInstances()
{

}

void Arrays_3TesseractStubAdapterInternal::init(std::shared_ptr<CTesseractStubAdapter> instance)
{
	const std::string routeUri(CommonAPI::StubAdapter::address_.getInterface() +"." + CommonAPI::StubAdapter::address_.getInstance() + ".route");
	const std::string getShortestRouteUri(CommonAPI::StubAdapter::address_.getInterface() +"." + CommonAPI::StubAdapter::address_.getInstance() + ".getShortestRoute");
	const std::string getPOIUri(CommonAPI::StubAdapter::address_.getInterface() +"." + CommonAPI::StubAdapter::address_.getInstance() + ".getPOI");
	
	Arrays_3TesseractStubAdapterHelper::init(instance);
	
	Arrays_3TesseractStubAdapterInternal::routeStubDispatcher.registerApi(routeUri, this);
	Arrays_3TesseractStubAdapterInternal::getShortestRouteStubDispatcher.registerApi(getShortestRouteUri, this);
	Arrays_3TesseractStubAdapterInternal::getPOIStubDispatcher.registerApi(getPOIUri, this);
	
}

void Arrays_3TesseractStubAdapterInternal::deinit()
{

}


CommonAPI::Tesseract::CAsyncApiHandler<
	Arrays_3Stub,
	std::tuple<std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>>,
	std::tuple<std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>>
> Arrays_3TesseractStubAdapterInternal::routeStubDispatcher(&Arrays_3Stub::route, std::tuple<std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>, std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>>());

CommonAPI::Tesseract::CAsyncApiHandler<
	Arrays_3Stub,
	std::tuple<::v0_1::com::harman::voice::Arrays_3::latlong>,
	std::tuple<std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>>
> Arrays_3TesseractStubAdapterInternal::getShortestRouteStubDispatcher(&Arrays_3Stub::getShortestRoute, std::tuple<::v0_1::com::harman::voice::Arrays_3::latlong, std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>>());

CommonAPI::Tesseract::CAsyncApiHandler<
	Arrays_3Stub,
	std::tuple<::v0_1::com::harman::voice::Arrays_3::latlong>,
	std::tuple<::v0_1::com::harman::voice::Arrays_3::POIS_NAME>
> Arrays_3TesseractStubAdapterInternal::getPOIStubDispatcher(&Arrays_3Stub::getPOI, std::tuple<::v0_1::com::harman::voice::Arrays_3::latlong, ::v0_1::com::harman::voice::Arrays_3::POIS_NAME>());



Arrays_3TesseractStubAdapter::Arrays_3TesseractStubAdapter(
	const CommonAPI::Address &_address,
	const std::shared_ptr<CommonAPI::StubBase> &_stub)
: Arrays_3TesseractStubAdapterInternal(_address,_stub)
{
	CommonAPI::StubAdapter::address_ = _address;
}

Arrays_3TesseractStubAdapter::~Arrays_3TesseractStubAdapter()
{
}

} // namespace voice
} // namespace harman
} // namespace com
} // namespace v0_1

