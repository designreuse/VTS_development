/**
 * generated by Voice CodeGen Version: Beta_R1_v0.1.0
 * generated on: Thu Sep 10 18:55:36 IST 2015
 */

#ifndef V0_1_COM_HARMAN_VOICE_ARRAYS_3TESSERACTPROXY_HPP
#define V0_1_COM_HARMAN_VOICE_ARRAYS_3TESSERACTPROXY_HPP

#include "v0_1/com/harman/voice/Arrays_3ProxyBase.hpp"
#include "v0_1/com/harman/voice/Arrays_3_tesseract_serializers.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Tesseract/CTesseractFactory.h>
#include <CommonAPI/Tesseract/CTesseractProxy.h>
#include <CommonAPI/Tesseract/CTesseractEvent.h>
#include <CommonAPI/Tesseract/CAsyncCallbackHandler.h>
#include <CommonAPI/Tesseract/CTesseractSerializers.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0_1 {
namespace com {
namespace harman {
namespace voice {

class Arrays_3TesseractProxy : virtual public Arrays_3ProxyBase, virtual public CommonAPI::Tesseract::CTesseractProxy
{
public:
	Arrays_3TesseractProxy(const CommonAPI::Address &_address);
	
	virtual ~Arrays_3TesseractProxy();
	
	virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

	
	
	virtual void route(const std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>& latLong, CommonAPI::CallStatus& callStatus, std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>& path, const CommonAPI::CallInfo *_info = nullptr);
	virtual std::future<CommonAPI::CallStatus> routeAsync(const std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>& latLong, RouteAsyncCallback callback, const CommonAPI::CallInfo *_info = nullptr);
	virtual void getShortestRoute(const ::v0_1::com::harman::voice::Arrays_3::latlong& latLongStructure, CommonAPI::CallStatus& callStatus, std::vector<::v0_1::com::harman::voice::Arrays_3::latlong>& path, const CommonAPI::CallInfo *_info = nullptr);
	virtual std::future<CommonAPI::CallStatus> getShortestRouteAsync(const ::v0_1::com::harman::voice::Arrays_3::latlong& latLongStructure, GetShortestRouteAsyncCallback callback, const CommonAPI::CallInfo *_info = nullptr);
	virtual void getPOI(const ::v0_1::com::harman::voice::Arrays_3::latlong& latLongStruct, CommonAPI::CallStatus& callStatus, ::v0_1::com::harman::voice::Arrays_3::POIS_NAME& poisName, const CommonAPI::CallInfo *_info = nullptr);
	virtual std::future<CommonAPI::CallStatus> getPOIAsync(const ::v0_1::com::harman::voice::Arrays_3::latlong& latLongStruct, GetPOIAsyncCallback callback, const CommonAPI::CallInfo *_info = nullptr);
private:
	
};

} // namespace voice
} // namespace harman
} // namespace com
} // namespace v0_1

#endif // V0_1_COM_HARMAN_VOICE_ARRAYS_3TESSERACTPROXY_HPP
