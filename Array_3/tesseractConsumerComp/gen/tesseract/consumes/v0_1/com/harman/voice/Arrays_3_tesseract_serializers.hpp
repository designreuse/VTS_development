/**
 * generated by Voice CodeGen Version: Beta_R1_v0.1.0
 * generated on: Thu Sep 10 18:55:36 IST 2015
 */

#ifndef V0_1_COM_HARMAN_VOICE_ARRAYS_3_TESSERACT_SERIALIZERS_HPP
#define V0_1_COM_HARMAN_VOICE_ARRAYS_3_TESSERACT_SERIALIZERS_HPP

#include <type_traits>
#include "v0_1/com/harman/voice/Arrays_3.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Tesseract/CTesseractSerializers.h>

#undef COMMONAPI_INTERNAL_COMPILATION

template <>
inline bool serialize<::v0_1::com::harman::voice::Arrays_3::POIS_NAME>(writer_t& o, const ::v0_1::com::harman::voice::Arrays_3::POIS_NAME& v)
{
	typename std::underlying_type<::v0_1::com::harman::voice::Arrays_3::POIS_NAME::Literal>::type v_ = static_cast<typename std::underlying_type<::v0_1::com::harman::voice::Arrays_3::POIS_NAME::Literal>::type>(v);
	return serialize(o, v_);
}

template <>
inline bool deserialize<::v0_1::com::harman::voice::Arrays_3::POIS_NAME>(const value_t& v, ::v0_1::com::harman::voice::Arrays_3::POIS_NAME& o)
{
	
	typename std::underlying_type<::v0_1::com::harman::voice::Arrays_3::POIS_NAME::Literal>::type o_;
	if(deserialize(v, o_))
	{
		o = static_cast<::v0_1::com::harman::voice::Arrays_3::POIS_NAME::Literal>(o_);
		return true;
	}
	return false;
}

template <>
inline bool serialize<::v0_1::com::harman::voice::Arrays_3::latlong>(writer_t& o, const ::v0_1::com::harman::voice::Arrays_3::latlong& v)
{
	return serialize_struct(o, "lat", v.getLat(), "longitude", v.getLongitude());
}

template <>
inline bool deserialize<::v0_1::com::harman::voice::Arrays_3::latlong>(const value_t& v, ::v0_1::com::harman::voice::Arrays_3::latlong& o)
{
	double _lat;
	double _longitude;
	if(deserialize_struct(v,"lat",_lat,"longitude",_longitude))
	{
		o.setLat(_lat);
		o.setLongitude(_longitude);
		return true;
	}
	else
	{
		return false;
	}
}



#endif // V0_1_COM_HARMAN_VOICE_ARRAYS_3_TESSERACT_SERIALIZERS_HPP
