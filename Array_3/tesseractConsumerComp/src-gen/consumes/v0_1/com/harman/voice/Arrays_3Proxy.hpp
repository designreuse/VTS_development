/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.2.qualifier.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: Beta_R1_v0.1.0
* generated on: Thu Sep 10 18:55:35 IST 2015
*/
#ifndef COM_HARMAN_VOICE_Arrays_3_PROXY_HPP_
#define COM_HARMAN_VOICE_Arrays_3_PROXY_HPP_

#include <v0_1/com/harman/voice/Arrays_3ProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0_1 {
namespace com {
namespace harman {
namespace voice {

template <typename ... _AttributeExtensions>
class Arrays_3Proxy
    : virtual public Arrays_3, 
      virtual public Arrays_3ProxyBase,
      public _AttributeExtensions... {
public:
    Arrays_3Proxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~Arrays_3Proxy();

    typedef Arrays_3 InterfaceType;




    /**
     * Calls route with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void route(const std::vector<Arrays_3::latlong> &_latLong, CommonAPI::CallStatus &_status, std::vector<Arrays_3::latlong> &_path, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls route with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> routeAsync(const std::vector<Arrays_3::latlong> &_latLong, RouteAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getShortestRoute with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getShortestRoute(const Arrays_3::latlong &_latLongStructure, CommonAPI::CallStatus &_status, std::vector<Arrays_3::latlong> &_path, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getShortestRoute with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getShortestRouteAsync(const Arrays_3::latlong &_latLongStructure, GetShortestRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getPOI with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getPOI(const Arrays_3::latlong &_latLongStruct, CommonAPI::CallStatus &_status, Arrays_3::POIS_NAME &_poisName, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getPOI with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getPOIAsync(const Arrays_3::latlong &_latLongStruct, GetPOIAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<Arrays_3ProxyBase> delegate_;
};

typedef Arrays_3Proxy<> Arrays_3ProxyDefault;


//
// Arrays_3Proxy Implementation
//
template <typename ... _AttributeExtensions>
Arrays_3Proxy<_AttributeExtensions...>::Arrays_3Proxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<Arrays_3ProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<Arrays_3ProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
Arrays_3Proxy<_AttributeExtensions...>::~Arrays_3Proxy() {
}

template <typename ... _AttributeExtensions>
void Arrays_3Proxy<_AttributeExtensions...>::route(const std::vector<Arrays_3::latlong> &_latLong, CommonAPI::CallStatus &_status, std::vector<Arrays_3::latlong> &_path, const CommonAPI::CallInfo *_info) {
    delegate_->route(_latLong, _status, _path, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> Arrays_3Proxy<_AttributeExtensions...>::routeAsync(const std::vector<Arrays_3::latlong> &_latLong, RouteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->routeAsync(_latLong, _callback, _info);
}
template <typename ... _AttributeExtensions>
void Arrays_3Proxy<_AttributeExtensions...>::getShortestRoute(const Arrays_3::latlong &_latLongStructure, CommonAPI::CallStatus &_status, std::vector<Arrays_3::latlong> &_path, const CommonAPI::CallInfo *_info) {
    delegate_->getShortestRoute(_latLongStructure, _status, _path, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> Arrays_3Proxy<_AttributeExtensions...>::getShortestRouteAsync(const Arrays_3::latlong &_latLongStructure, GetShortestRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getShortestRouteAsync(_latLongStructure, _callback, _info);
}
template <typename ... _AttributeExtensions>
void Arrays_3Proxy<_AttributeExtensions...>::getPOI(const Arrays_3::latlong &_latLongStruct, CommonAPI::CallStatus &_status, Arrays_3::POIS_NAME &_poisName, const CommonAPI::CallInfo *_info) {
    delegate_->getPOI(_latLongStruct, _status, _poisName, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> Arrays_3Proxy<_AttributeExtensions...>::getPOIAsync(const Arrays_3::latlong &_latLongStruct, GetPOIAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getPOIAsync(_latLongStruct, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &Arrays_3Proxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool Arrays_3Proxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool Arrays_3Proxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& Arrays_3Proxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& Arrays_3Proxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace voice
} // namespace harman
} // namespace com
} // namespace v0_1


#endif // COM_HARMAN_VOICE_Arrays_3_PROXY_HPP_
