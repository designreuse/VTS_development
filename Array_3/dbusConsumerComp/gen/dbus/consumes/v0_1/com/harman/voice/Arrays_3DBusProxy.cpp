/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.2.qualifier.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: Beta_R1_v0.1.0
* generated on: Thu Sep 10 18:55:35 IST 2015
*/
#include <v0_1/com/harman/voice/Arrays_3DBusProxy.hpp>

namespace v0_1 {
namespace com {
namespace harman {
namespace voice {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createArrays_3DBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<Arrays_3DBusProxy>(_address, _connection);
}

INITIALIZER(registerArrays_3DBusProxy) {
	CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		Arrays_3::getInterface(),
		&createArrays_3DBusProxy);
}

Arrays_3DBusProxy::Arrays_3DBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
{
}



        void Arrays_3DBusProxy::route(const std::vector<Arrays_3::latlong> &_latLong, CommonAPI::CallStatus &_status, std::vector<Arrays_3::latlong> &_path, const CommonAPI::CallInfo *_info) {
            CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::vector<Arrays_3::latlong>>,
                                             CommonAPI::DBus::DBusSerializableArguments<std::vector<Arrays_3::latlong>> >::callMethodWithReply(
            *this,
            "route",
            "a(dd)",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            _latLong,
            _status
            , _path);
        }
        std::future<CommonAPI::CallStatus> Arrays_3DBusProxy::routeAsync(const std::vector<Arrays_3::latlong> &_latLong, RouteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::vector<Arrays_3::latlong>>,
                                             CommonAPI::DBus::DBusSerializableArguments<std::vector<Arrays_3::latlong>> >::callMethodAsync(
            *this,
            "route",
            "a(dd)",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            _latLong,
            std::move(_callback),
            std::tuple<std::vector<Arrays_3::latlong>>());
        }
        void Arrays_3DBusProxy::getShortestRoute(const Arrays_3::latlong &_latLongStructure, CommonAPI::CallStatus &_status, std::vector<Arrays_3::latlong> &_path, const CommonAPI::CallInfo *_info) {
            CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<Arrays_3::latlong>,
                                             CommonAPI::DBus::DBusSerializableArguments<std::vector<Arrays_3::latlong>> >::callMethodWithReply(
            *this,
            "getShortestRoute",
            "(dd)",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            _latLongStructure,
            _status
            , _path);
        }
        std::future<CommonAPI::CallStatus> Arrays_3DBusProxy::getShortestRouteAsync(const Arrays_3::latlong &_latLongStructure, GetShortestRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<Arrays_3::latlong>,
                                             CommonAPI::DBus::DBusSerializableArguments<std::vector<Arrays_3::latlong>> >::callMethodAsync(
            *this,
            "getShortestRoute",
            "(dd)",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            _latLongStructure,
            std::move(_callback),
            std::tuple<std::vector<Arrays_3::latlong>>());
        }
        void Arrays_3DBusProxy::getPOI(const Arrays_3::latlong &_latLongStruct, CommonAPI::CallStatus &_status, Arrays_3::POIS_NAME &_poisName, const CommonAPI::CallInfo *_info) {
            CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<Arrays_3::latlong>,
                                             CommonAPI::DBus::DBusSerializableArguments<Arrays_3::POIS_NAME> >::callMethodWithReply(
            *this,
            "getPOI",
            "(dd)",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            _latLongStruct,
            _status
            , _poisName);
        }
        std::future<CommonAPI::CallStatus> Arrays_3DBusProxy::getPOIAsync(const Arrays_3::latlong &_latLongStruct, GetPOIAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<Arrays_3::latlong>,
                                             CommonAPI::DBus::DBusSerializableArguments<Arrays_3::POIS_NAME> >::callMethodAsync(
            *this,
            "getPOI",
            "(dd)",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            _latLongStruct,
            std::move(_callback),
            std::tuple<Arrays_3::POIS_NAME>());
        }


        void Arrays_3DBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
            ownVersionMajor = 0;
            ownVersionMinor = 1;
        }

        } // namespace voice
        } // namespace harman
        } // namespace com
        } // namespace v0_1
